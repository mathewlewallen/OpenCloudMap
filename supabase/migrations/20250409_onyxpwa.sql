CREATE TABLE public.chat (
  id bigint primary key generated always as identity,
  created_at timestamp with time zone NOT NULL,
  path text NULL DEFAULT ''::text,
  sharepath text NULL,
  messages text[] NULL,
  title text NULL DEFAULT ''::text,
  profile_id text NOT NULL,
  user_id uuid NOT NULL DEFAULT auth.uid()
) WITH (OIDS=FALSE);
ALTER TABLE public.chat ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.countries (
  id bigint primary key generated always as identity,
  name text NULL,
  iso2 text NOT NULL,
  iso3 text NOT NULL,
  local_name text NULL,
  continent public.continents NULL
) WITH (OIDS=FALSE);
ALTER TABLE public.countries ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.inqueries (
  id bigint primary key generated always as identity,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  name text NOT NULL DEFAULT ''::text,
  email text NOT NULL DEFAULT ''::text,
  message text NOT NULL,
  user_id uuid NOT NULL DEFAULT auth.uid()
) WITH (OIDS=FALSE);
ALTER TABLE public.inqueries ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.meetings (
  id bigint primary key generated always as identity,
  user_id uuid NOT NULL DEFAULT auth.uid(),
  summary text NOT NULL,
  description text NULL,
  start_time timestamp with time zone NOT NULL,
  end_time timestamp with time zone NOT NULL,
  meet_link text NOT NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now()
) WITH (OIDS=FALSE);
ALTER TABLE public.meetings ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.members_table (
  id bigint primary key generated always as identity,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  name text NULL DEFAULT ''::text,
  member_id uuid NOT NULL,
  email text NULL DEFAULT ''::text,
  password text NOT NULL DEFAULT ''::text
) WITH (OIDS=FALSE);
ALTER TABLE public.members_table ENABLE ROW LEVEL SECURITY;

create table public.profiles (
  id uuid not null default auth.uid (),
  updated_at timestamp with time zone null,
  username text null,
  full_name text null,
  avatar_url text null,
  website text null,
  email text null,
  waddress text null,
  xhandle text null,
  created_at timestamp with time zone null default (now() AT TIME ZONE 'utc'::text),
  company text null,
  company_logo_url text null,
  job_title text null,
  linkedin_url text null,
  public_id uuid null,
  card_styles text null,
  card_style jsonb null,
  role text null default 'user'::text,
  constraint profiles_pkey primary key (id),
  constraint profiles_username_key unique (username),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE,
  constraint username_length check ((char_length(username) >= 3))
) TABLESPACE pg_default;

create index IF not exists idx_profiles_role on public.profiles using btree (role) TABLESPACE pg_default;

CREATE TABLE public.permission_table (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  role text NOT NULL,
  status text NOT NULL,
  member_id uuid NOT NULL,
  CONSTRAINT permission_table_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

CREATE TABLE public.todos (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  user_id uuid NOT NULL DEFAULT auth.uid(),
  task text NULL,
  is_complete boolean NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  title text NOT NULL DEFAULT ''::text,
  created_by uuid NOT NULL,
  CONSTRAINT todos_pkey PRIMARY KEY (id),
  CONSTRAINT todos_created_by_fkey FOREIGN KEY (created_by) REFERENCES members_table(member_id) ON UPDATE RESTRICT ON DELETE RESTRICT,
  CONSTRAINT todos_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT todos_task_check CHECK ((char_length(task) > 3))
) TABLESPACE pg_default;

CREATE POLICY "Individuals can view their own permissions." ON public.permission_table FOR SELECT TO authenticated USING ((select auth.uid()) = member_id);
CREATE POLICY "Individuals can insert their own permissions." ON public.permission_table FOR INSERT TO authenticated WITH CHECK ((select auth.uid()) = member_id);
CREATE POLICY "Individuals can update their own permissions." ON public.permission_table FOR UPDATE TO authenticated USING ((select auth.uid()) = member_id) WITH CHECK ((select auth.uid()) = member_id);
CREATE POLICY "Individuals can delete their own permissions." ON public.permission_table FOR DELETE TO authenticated USING ((select auth.uid()) = member_id);

CREATE POLICY "Individuals can view their own todos." ON public.todos FOR SELECT TO authenticated USING ((select auth.uid()) = user_id);
CREATE POLICY "Individuals can insert their own todos." ON public.todos FOR INSERT TO authenticated WITH CHECK ((select auth.uid()) = user_id);
CREATE POLICY "Individuals can update their own todos." ON public.todos FOR UPDATE TO authenticated USING ((select auth.uid()) = user_id) WITH CHECK ((select auth.uid()) = user_id);
CREATE POLICY "Individuals can delete their own todos." ON public.todos FOR DELETE TO authenticated USING ((select auth.uid()) = user_id);
```

-- Remember to create RLS policies for this table before using it with Supabase APIs.
